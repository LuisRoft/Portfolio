<button type="button" id="theme-selector" class="px-2 py-1 rounded bg-yellow dark:bg-darkBg text-textPrimary dark:text-darKText">
  <span class="sr-only">Enable <span class="dark:hidden">light</span><span class="hidden dark:inline">dark</span> mode</span>
  <span class="hidden dark:inline">
    <i class="uil uil-moon"></i>
  </span>
  <span class="dark:hidden">
    <i class="uil uil-sun"></i>
  </span>
</button>



<script>
  // Function to set up the theme toggle functionality
  function setupThemeToggle() {
    const themeToggle = document.getElementById('theme-selector');
    
    if (themeToggle) {
      // Remove any existing listeners first to prevent duplicates
      const newToggle = themeToggle.cloneNode(true);
      themeToggle.parentNode?.replaceChild(newToggle, themeToggle);
      
      // Add the event listener to the new element
      newToggle.addEventListener('click', () => {
        if (localStorage.theme === 'dark') {
          localStorage.theme = 'light';
          document.documentElement.classList.remove('dark');
        } else {
          localStorage.theme = 'dark';
          document.documentElement.classList.add('dark');
        }
      });
    }
  }

  // Run once on initial load
  setupThemeToggle();
  
  // Re-run after view transitions
  document.addEventListener('astro:page-load', setupThemeToggle);
  
  // Clean up before transitions
  document.addEventListener('astro:before-swap', () => {
    // This ensures we don't get duplicate listeners
    const themeToggle = document.getElementById('theme-selector');
    if (themeToggle) {
      const newToggle = themeToggle.cloneNode(true);
      themeToggle.parentNode?.replaceChild(newToggle, themeToggle);
    }
  });
</script>